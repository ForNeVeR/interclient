<!--ant build script for interclient 20/ interserver
See ant project (jakarta-ant) at www.apache.org
author: david jencks davidjencks@earthlink.net
copyright 2001 david jencks
This may be used under the MPL or  LGPL (see gnu.org)-->

<project name="Interclient" default="dist.all" basedir="../..">

  <property name="build.dir" value="${basedir}/build"/>
  <property name="build.dir.java" value="${build.dir}/classes"/>
  <property name="build.dir.cpp" value="${build.dir}/interserver"/>
  <property name="build.dir.bin" value="${build.dir}/bin"/>
  <property name="src.dir.java" value="${basedir}/dev/packages"/>
  <property name="src.dir.cpp" value="${basedir}/dev/interserver"/>
  <property name="jar.dir" value="${basedir}/build/interclient"/>
  <property name="dist.dir" value="${basedir}/dist"/>
  <property name="resource.dir" value="${basedir}/dev/firebird"/>

  <target name="setup.java">
    <mkdir dir="${build.dir.java}"/>
    <mkdir dir="${jar.dir}"/>
    <mkdir dir="${dist.dir}"/>
  </target>

  <target name="compile.java" depends="setup.java">
    <javac srcdir="${src.dir.java}" destdir="${build.dir.java}"/>
  </target>
  
  <target name="test" depends="compile.java">
    <java classpath="${jar.dir}/interclient.jar:${build.dir.java}" classname="test.TestPreparedStatementInputBlobs"/>
  </target>
  

  <target name="jar" depends="compile.java">
    <jar jarfile="${jar.dir}/interclient.jar" basedir="${build.dir.java}"
        excludes="**/test/**"/>
    <jar jarfile="${jar.dir}/interclient-utils.jar" basedir="${build.dir.java}"
        includes="**/utils/**"
        excludes="**/utils/Resources_ru.class"/>
    <jar jarfile="${jar.dir}/interclient-res.jar" basedir="${build.dir.java}"
        includes="**/Resources_ru.class"/>
    <jar jarfile="${jar.dir}/interclient-core.jar" basedir="${build.dir.java}"
        excludes="**/utils/**,**/Resources_ru.class,test/**"/>
  </target>

  <target name="dist.jar" depends="jar">
    <copy file="${jar.dir}/interclient.jar" todir="${dist.dir}"/>
    <copy file="${jar.dir}/interclient-core.jar" todir="${dist.dir}"/>
    <copy file="${jar.dir}/interclient-res.jar" todir="${dist.dir}"/>
    <copy file="${jar.dir}/interclient-utils.jar" todir="${dist.dir}"/>
  </target>
  
<!--LINUX_LDLIBS=		 -lgds  -L/usr/local/lib -lstdc++ -lc -ldl -lcrypt
-->
<!--Solaris LDLIBS=		-lgdsmt -lnsl -lsocket -ldl -lthread-->


  <property name="is${os.name}" value="true"/>
<!-- Sets os specific options cc, ccflags, includes for compile and  ldlibs for link -->
  <target name="set.cpp.os.options" depends="set.linux, set.solaris"/>
  <target name="set.linux" if="isLinux">
    <property name="cc" value="gcc"/>
    <property name="ccflags" value="-w -fhandle-exceptions -DUSE_INETD -DUNIX -DARCH_32"/>
    <!--property name="ccflags" value="-w -ggdb -fhandle-exceptions -DUSE_INETD -DDEBUG -DUNIX -DARCH_32"/--><!--use for debug-->
    <property name="includes" value="-I/usr/interbase/include"/>
    <property name="ldlibs" value="-lgds  -L/usr/local/lib -lstdc++ -lc -ldl -lcrypt"/>
  </target>
  <target name="set.solaris" if="isSolaris">
    <property name="cc" value="CC"/>
    <property name="ccflags" value="-O -DUSE_INETD -DUNIX -DSYS5 -DARCH_32 -DWORDS_BIGENDIAN"/>
    <!--property name="ccflags" value="-O -DDEBUG -DUSE_INETD -DUNIX -DSYS5 -DARCH_32 -DWORDS_BIGENDIAN"/--><!--use for debug-->
    <property name="includes" value="-I/usr/local/interbase/include"/>
    <property name="ldlibs" value="-lgdsmt -lnsl -lsocket -ldl -lthread"/>
  </target>

  <target name="setup.cpp" depends="set.cpp.os.options">
    <mkdir dir="${build.dir.cpp}"/>
    <mkdir dir="${build.dir.bin}"/>
  </target>
  
<!--		$(CC) $(CCFLAGS) $(INCLUDES) -c $*.cpp -o $*.o   -->
  <target name="compile.cpp" depends="setup.cpp">
    <apply executable="${cc}" dest="${build.dir.cpp}" parallel="false">
       <arg line="${ccflags}"/>
       <arg line="${includes}"/>
       <arg value="-c"/>
       <srcfile/>
       <arg value="-o"/>
       <targetfile/>
       <fileset dir="${src.dir.cpp}" includes="*.cpp" excludes="Property.cpp, Window.cpp, interservice.cpp"/>
       <mapper type="glob" from="*.cpp" to="*.o"/>
    </apply>  
  </target>

<!--		$(CC) $(OBJS) interserver.o -o interserver $(LDLIBS)-->
  <target name="link.cpp" depends="compile.cpp">
    <execon executable="${cc}" parallel="true">
       <srcfile/>
       <arg value="-o"/>
       <arg value="${build.dir.bin}/interserver"/>
       <arg line="${ldlibs}"/>
       <fileset dir="${build.dir.cpp}" includes="*.o"/>
    </execon>  
  </target>

  <target name="dist.cpp" depends="link.cpp">
    <copy file="${build.dir.bin}/interserver" todir="${dist.dir}"/>
  </target>

  <target name="dist.all" depends="dist.jar, dist.cpp">
  </target>

  <target name="targz" depends="dist.all">
    <mkdir dir="${dist.dir}/xinetd.d"/>
    <copy file="${resource.dir}/interserver" todir="${dist.dir}/xinetd.d"/>
    <copy file="${resource.dir}/readme" todir="${dist.dir}"/>
    <copy file="${src.dir.java}/interbase/interclient/utils/CommDiag.html" todir="${dist.dir}"/>
    <tar tarfile="${dist.dir}/interclient-2.0-linux-xinetd.tar"
      basedir="${dist.dir}"
      includes="interclient.jar,interclient-core.jar,interclient-utils.jar,interclient-res.jar,interserver,xinetd.d/interserver,readme,CommDiag.html"/>
    <gzip src="${dist.dir}/interclient-2.0-linux-xinetd.tar" zipfile="${dist.dir}/interclient-2.0-linux-xinetd.tar.gz"/>
  </target>

  <target name="clean">
    <delete dir="${dist.dir}"/>
    <delete dir="${build.dir}"/>
  </target>
  
</project>


